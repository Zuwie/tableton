datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id       String           @id @default(cuid())
  email    String           @unique
  userName String
  avatar   String?
  password Password?
  profile  ExtendedProfile?
  contact  Contact?

  discordId           String?
  discordRefreshToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  boardEntries          BoardEntry[]
  incomingMatchRequests MatchRequest[] @relation("incomingMatchRequests")
  outgoingMatchRequests MatchRequest[] @relation("outgoingMatchRequests")
  challenger            BoardEntry[]   @relation("challenger")

  notifications Notification[]
}

model ExtendedProfile {
  id        Int     @id @default(autoincrement())
  biography String
  faction   String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Contact {
  id      String  @id @default(cuid())
  phone   String?
  discord String?
  email   String?
  twitter String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model BoardEntry {
  id String @id @default(cuid())

  title String
  body  String

  gameSystem String
  location   String
  date       DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String
  matchRequests MatchRequest[]

  status       Int     @default(0)
  challenger   User?   @relation("challenger", fields: [challengerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  challengerId String?
}

model MatchRequest {
  id String @id @default(cuid())

  fromUser   User   @relation("outgoingMatchRequests", fields: [fromUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fromUserId String
  toUser     User   @relation("incomingMatchRequests", fields: [toUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  toUserId   String

  status    Int      @default(0)
  createdAt DateTime @default(now())

  boardEntry   BoardEntry @relation(fields: [boardEntryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  boardEntryId String
}

model Notification {
  id String @id @default(cuid())

  type      String
  readAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
}
